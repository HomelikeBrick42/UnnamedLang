proc factorial(n: u64) => u64 {
    if n <= 1 {
        return 1
    } else {
        return n * factorial(n - 1)
    }
}

proc print_u64(value: u64) => void {
    var length <- 0
    {
        var copy <- value
        if copy == 0 {
            length <- 1
        } else {
            while copy > 0 {
                copy <- copy / 10
                length <- length + 1
            }
        }
    }

    var i <- length - 1
    while i >= 0 {
        var copy <- value
        var j <- 0
        while j < i {
            copy <- copy / 10
            j <- j + 1
        }
        let digit = copy % 10 + 48
        print_char(cast(u8) digit)
        i <- i - 1
    }
}

print_u64(factorial(6))
print_char(10)

proc change_value(ptr: ^u64, value: u64) => void {
    ptr^ <- value * 25
}

var foo: u64 <- 5
print_u64(foo)
print_char(10)

change_value(&foo, 10)
print_u64(foo)
print_char(10)

proc print_char(char: u8) => bool {
    proc GetStdHandle(nStdHandle: s32) => ^void #stdcall #extern "GetStdHandle"
    proc WriteConsole(
        hConsoleOutput: ^void,
        lpBuffer: ^u8,
        nNumberOfCharsToWrite: s32,
        lpNumberOfCharsWritten: ^s32,
        lpReserved: u64,
    ) => ^void #stdcall #extern "WriteConsoleA"

    let stdout = GetStdHandle(-11)
    var char_copy <- char
    var chars_written: s32 <- 0
    WriteConsole(stdout, &char_copy, 1, &chars_written, 0)
    return chars_written != 0
}
